PUT tweet/_mapping/
{
  "properties": {
    "full_text": { 
      "type":     "text",
      "fielddata": true
    }
  }
}

PUT tweet_v2/_mapping/
{
  "properties": {
    "text": { 
      "type":     "text",
      "fielddata": true
    }
  }
}

GET tweet_v2/_search
{
  "size" : 100,
  "query": {
    "match":{
      "tweet.text": {
        "query": "Python", 
        "analyzer": "stop"
      }
    }
  },
  "_source": "tweet.text",
  "aggs": {
        "keywords": {
            "significant_text": {
                "field": "tweet.text"
                , "size": 25
            }},
        "keywords2":{
            "significant_text": {
                "field": "tweet.text.keyword"
                , "size": 25
            }
        }
    }
  
}



PUT tweet
{
  "settings": {
        "analysis": {
            "analyzer": {
                "standard": {
                    "type": "standard",
                    "stopwords": "_english_"
                }
            }
        }
    }
}

GET tweet/_search
{
  "query": {
    "match":{
      "full_text": {
        "query": "Python", 
        "analyzer": "stop"
      }
    }
  },
  "_source": "full_text",
  "aggs": {
        "keywords": {
            "significant_text": {
                "field": "full_text"
                , "size": 25
            }},
        "keywords2":{
            "significant_text": {
                "field": "full_text.keyword"
                , "size": 25
            }
        }
    }
  
}

GET tweet/_search
{
  "query": {
    "match_all":{
    }
  },
  "_source": "full_text",
  "aggs": {
        "keywords": {
            "significant_text": {
                "field": "full_text.keyword"
                , "size": 25
            }},
        "keywords2":{
          "terms": {
            "field": "full_text",
            "size": 25
          }
        }
    }
  
}


    # keywords_with_counts = Counter(keywords)
    # keywords_wordcloud = [{"text": a, "value":b} for a, b in keywords_with_counts.most_common(100)]

    # wc_dict = {}
    # for i in range(len(keywords)):
    #     wc_dict[keywords[i]] = score[i]

    # wordcloud = WordCloud(
    #     width=500, height=500).generate_from_frequencies(wc_dict)
    # plt.figure(figsize=(15, 8))
    # plt.imshow(wordcloud)
    # plt.axis("off")
    # # plt.show()
    # plt.savefig('yourfile.png', bbox_inches='tight')
    # plt.close()
